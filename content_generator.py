from openai import OpenAI
import random
from config import OPENAI_API_KEY, CTA_PHRASES, TELEGRAM_CHANNEL_LINK

class ContentGenerator:
    def __init__(self):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OpenAI –∫–ª—ñ—î–Ω—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î API –∫–ª—é—á
        if OPENAI_API_KEY and OPENAI_API_KEY.strip():
            self.client = OpenAI(api_key=OPENAI_API_KEY)
        else:
            self.client = None
        self.cta_phrases = CTA_PHRASES
        self.telegram_link = TELEGRAM_CHANNEL_LINK
    
    def generate_post_description(self, news_title, news_content, max_length=2000):
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –æ–ø–∏—Å –ø–æ—Å—Ç–∞ –∑ –Ω–æ–≤–∏–Ω–∏"""
        # –Ø–∫—â–æ –Ω–µ–º–∞—î OpenAI –∫–ª—ñ—î–Ω—Ç–∞, –æ–¥—Ä–∞–∑—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
        if not self.client:
            return self.generate_fallback_post(news_title, news_content)
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
            prompt = f"""
            –°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –ø–æ—Å—Ç –¥–ª—è Instagram –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏. –ü–æ—Å—Ç –º–∞—î –±—É—Ç–∏:
            - –¶—ñ–∫–∞–≤–∏–º —Ç–∞ –∑–∞—Ü—ñ–∫–∞–≤–ª—é—é—á–∏–º
            - –ï–º–æ—Ü—ñ–π–Ω–∏–º —Ç–∞ –∑–∞—Ö–æ–ø–ª—é—é—á–∏–º
            - –ù–µ –±—ñ–ª—å—à–µ {max_length // 2} —Å–∏–º–≤–æ–ª—ñ–≤ (–æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç)
            - –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
            - –ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –µ–º–æ–¥–∑—ñ
            - –ë–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å (—ó—Ö –¥–æ–¥–∞–º –æ–∫—Ä–µ–º–æ)
            
            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏: {news_title}
            
            –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–∏–Ω–∏: {news_content[:500]}...
            
            –°—Ç–∏–ª—å: –º–æ–ª–æ–¥—ñ–∂–Ω–∏–π, —Å—É—á–∞—Å–Ω–∏–π, –∑ –µ–º–æ–¥–∑—ñ. –ó—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± –ª—é–¥–∏ –∑–∞—Ö–æ—Ç—ñ–ª–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ.
            """
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–æ–±–∏—Ç–∏ –øosti, —è–∫—ñ –∑–∞–ª—É—á–∞—é—Ç—å —É–≤–∞–≥—É —Ç–∞ –æ—Ç—Ä–∏–º—É—é—Ç—å –≤–∏—Å–æ–∫–∏–π engagement."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.8
            )
            
            generated_text = response.choices[0].message.content.strip()
            
            # –û—á–∏—â–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
            generated_text = self.clean_content(generated_text)
            
            # –î–æ–¥–∞—î–º–æ call-to-action —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram
            cta = random.choice(self.cta_phrases)
            final_post = f"{generated_text}\n\n{cta}\nüëâ {self.telegram_link}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É
            if len(final_post) > max_length:
                # –û–±—Ä—ñ–∑–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç, —â–æ–± –≤–ª—ñ–∑—Ç–∏ –≤ –ª—ñ–º—ñ—Ç
                max_main_text = max_length - len(f"\n\n{cta}\nüëâ {self.telegram_link}") - 50
                generated_text = generated_text[:max_main_text] + "..."
                final_post = f"{generated_text}\n\n{cta}\nüëâ {self.telegram_link}"
            
            return final_post
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
            return self.generate_fallback_post(news_title, news_content)
    
    def generate_fallback_post(self, news_title, news_content):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞ –±–µ–∑ OpenAI"""
        try:
            # –û—á–∏—â–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–¥ –Ω–µ–±–∞–∂–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            news_title = self.clean_content(news_title)
            # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–æ–≤–∏–Ω
            emoji_sets = {
                'politics': ["üèõÔ∏è", "‚öñÔ∏è", "üó≥Ô∏è", "üìä", "üî•"],
                'economy': ["üí∞", "üìà", "üìâ", "üíº", "üè¶"],
                'technology': ["üöÄ", "üíª", "üì±", "‚ö°", "üîÆ"],
                'sports': ["‚öΩ", "üèÜ", "ü•á", "‚≠ê", "üí™"],
                'entertainment': ["üé¨", "üé≠", "üåü", "‚ú®", "üéØ"],
                'health': ["üè•", "üíä", "üî¨", "‚ù§Ô∏è", "ü©∫"],
                'world': ["üåç", "üåé", "üó∫Ô∏è", "üì∞", "üî•"],
                'default': ["üì∞", "üî•", "‚ö°", "üí•", "üåü", "üí°", "üì¢", "üéØ"]
            }
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–æ–≤–∏–Ω–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
            category = self.detect_news_category(news_title, news_content)
            emoji = random.choice(emoji_sets.get(category, emoji_sets['default']))
            
            # –†–æ–∑—à–∏—Ä–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            formatted_content = self.format_news_content_extended(news_content)
            
            # –î–æ–¥–∞—î–º–æ —Ü—ñ–∫–∞–≤—ñ —Ñ—Ä–∞–∑–∏-–∑–∞—á—ñ–ø–∫–∏
            hooks = [
                "–¶–µ –≤–∞—Ä—Ç–æ –∑–Ω–∞—Ç–∏! üëá",
                "–®–æ–∫—É—é—á–∞ –ø—Ä–∞–≤–¥–∞! üò±",
                "–í–∏ –Ω–µ –ø–æ–≤—ñ—Ä–∏—Ç–µ! ü§Ø",
                "–í–∞–∂–ª–∏–≤–æ –¥–ª—è –≤—Å—ñ—Ö! ‚ö†Ô∏è",
                "–¢—Ä–µ–Ω–¥ –¥–Ω—è! üìà",
                "–ì–∞—Ä—è—á–∞ –Ω–æ–≤–∏–Ω–∞! üî•",
                "–í—Å—ñ –≥–æ–≤–æ—Ä—è—Ç—å –ø—Ä–æ —Ü–µ! üí¨"
            ]
            
            hook = random.choice(hooks)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç
            post_parts = [
                f"{emoji} {hook}",
                "",
                f"**{news_title}**",
                "",
                formatted_content,
                "",
                random.choice(self.cta_phrases),
                f"üëâ {self.telegram_link}"
            ]
            
            post = "\n".join(post_parts)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ –æ–±—Ä—ñ–∑–∞—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if len(post) > 2000:
                # –°–∫–æ—Ä–æ—á—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
                max_content_length = 1500 - len(post) + len(formatted_content)
                formatted_content = formatted_content[:max_content_length] + "..."
                
                post_parts[4] = formatted_content
                post = "\n".join(post_parts)
            
            return post
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
            return f"üì∞ –í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏!\n\n{news_title}\n\n{random.choice(self.cta_phrases)}\nüëâ {self.telegram_link}"
    
    def detect_news_category(self, title, content):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–æ–≤–∏–Ω–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"""
        text = f"{title} {content}".lower()
        
        categories = {
            'politics': ['–ø–æ–ª—ñ—Ç–∏–∫–∞', '—É—Ä—è–¥', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–≤–∏–±–æ—Ä–∏', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–º—ñ–Ω—ñ—Å—Ç—Ä'],
            'economy': ['–µ–∫–æ–Ω–æ–º—ñ–∫–∞', '–≥—Ä–æ—à—ñ', '–±—ñ–∑–Ω–µ—Å', '—Ä–∏–Ω–æ–∫', '–±–∞–Ω–∫', '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', '—Ü–µ–Ω–∞'],
            'technology': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è', '–∫–æ–º–ø\'—é—Ç–µ—Ä', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç', '–¥–æ–¥–∞—Ç–æ–∫', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç'],
            'sports': ['—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '–∑–º–∞–≥–∞–Ω–Ω—è', '—á–µ–º–ø—ñ–æ–Ω–∞—Ç', '–æ–ª—ñ–º–ø—ñ–∞–¥–∞'],
            'entertainment': ['—Ñ—ñ–ª—å–º', '–º—É–∑–∏–∫–∞', '–∑—ñ—Ä–∫–∞', '—à–æ—É', '–∫–æ–Ω—Ü–µ—Ä—Ç'],
            'health': ['–∑–¥–æ—Ä–æ–≤\'—è', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–ª—ñ–∫—É–≤–∞–Ω–Ω—è', '—Ö–≤–æ—Ä–æ–±–∞', '–≤–∞–∫—Ü–∏–Ω–∞'],
            'world': ['—Å–≤—ñ—Ç', '–∫—Ä–∞—ó–Ω–∞', '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π', '–≤—ñ–π–Ω–∞', '–º–∏—Ä']
        }
        
        for category, keywords in categories.items():
            if any(keyword in text for keyword in keywords):
                return category
        
        return 'default'
    
    def format_news_content(self, content):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–æ–≤–∏–Ω–∏"""
        if not content:
            return "–î–µ—Ç–∞–ª—ñ –≤ –ø–æ–≤–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ –Ω–æ–≤–∏–Ω–∏."
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        content = self.clean_content(content)
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
        sentences = content.split('.')
        
        # –ë–µ—Ä–µ–º–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ —Ä–µ—á–µ–Ω–Ω—è (–Ω–µ –±—ñ–ª—å—à–µ 3-4)
        good_sentences = []
        for sentence in sentences[:6]:
            sentence = sentence.strip()
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ä–µ—á–µ–Ω—å
            if (len(sentence) > 20 and len(sentence) < 200 and 
                not self.is_unwanted_sentence(sentence)):
                good_sentences.append(sentence)
            if len(good_sentences) >= 3:
                break
        
        if not good_sentences:
            cleaned_content = self.clean_content(content)
            return cleaned_content[:300] + "..." if len(cleaned_content) > 300 else cleaned_content
        
        # –ó'—î–¥–Ω—É—î–º–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        formatted = '. '.join(good_sentences) + '.'
        
        # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—ñ–≤
        formatted = formatted.replace('!', '! üòÆ')
        formatted = formatted.replace('?', '? ü§î')
        
        return formatted
    
    def format_news_content_extended(self, content):
        """–†–æ–∑—à–∏—Ä–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–µ–∫—Å—Ç—É"""
        if not content:
            return "–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É –ø–æ–≤–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ –Ω–æ–≤–∏–Ω–∏. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!"
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        content = self.clean_content(content)
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
        sentences = content.split('.')
        
        # –ë–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ —Ä–µ—á–µ–Ω—å –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É (5-6 –∑–∞–º—ñ—Å—Ç—å 3-4)
        good_sentences = []
        for sentence in sentences[:10]:
            sentence = sentence.strip()
            if (len(sentence) > 15 and len(sentence) < 250 and 
                not self.is_unwanted_sentence(sentence)):
                good_sentences.append(sentence)
            if len(good_sentences) >= 6:
                break
        
        if not good_sentences:
            return content[:400] + "..." if len(content) > 400 else content
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è
        formatted_parts = []
        for i, sentence in enumerate(good_sentences):
            if i == 0:
                formatted_parts.append(f"üîπ {sentence}.")
            elif i < 3:
                formatted_parts.append(f"‚ñ´Ô∏è {sentence}.")
            else:
                formatted_parts.append(f"‚Ä¢ {sentence}.")
        
        return '\n\n'.join(formatted_parts)
    
    def clean_content(self, text):
        """–û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
        if not text:
            return text
        
        import re
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ—Ä–æ—á–∫–∏
        text = re.sub(r'\*+', '', text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–æ–≤–æ "–†–µ–∫–ª–∞–º–∞" —ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó
        text = re.sub(r'\b[–†—Ä]–µ–∫–ª–∞–º–∞\b', '', text, flags=re.IGNORECASE)
        text = re.sub(r'\b[–ê–∞]dvertisement\b', '', text, flags=re.IGNORECASE)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        text = re.sub(r'¬©\s*[^\s]+\.[a-z]{2,4}', '', text, flags=re.IGNORECASE)
        text = re.sub(r'[–ö–∫]—É—Ä—Å –≤–∞–ª—é—Ç?\s*/\s*¬©.*', '', text)
        text = re.sub(r'unsplash\.com', '', text, flags=re.IGNORECASE)
        text = re.sub(r'getty\s*images?', '', text, flags=re.IGNORECASE)
        text = re.sub(r'shutterstock', '', text, flags=re.IGNORECASE)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        text = re.sub(r'¬©.*$', '', text, flags=re.MULTILINE)
        text = re.sub(r'–î–∂–µ—Ä–µ–ª–æ:.*$', '', text, flags=re.MULTILINE)
        text = re.sub(r'–§–æ—Ç–æ:.*$', '', text, flags=re.MULTILINE)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text
    
    def is_unwanted_sentence(self, sentence):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ä–µ—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–±–∞–∂–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        unwanted_patterns = [
            r'\*+',  # –ó—ñ—Ä–æ—á–∫–∏
            r'[–†—Ä]–µ–∫–ª–∞–º–∞',  # –†–µ–∫–ª–∞–º–∞
            r'¬©.*',  # –ö–æ–ø—ñ—Ä–∞–π—Ç
            r'unsplash',  # Unsplash
            r'getty',  # Getty Images
            r'shutterstock',  # Shutterstock
            r'[–î–¥]–∂–µ—Ä–µ–ª–æ:',  # –î–∂–µ—Ä–µ–ª–æ
            r'[–§—Ñ]–æ—Ç–æ:',  # –§–æ—Ç–æ
            r'–∫—É—Ä—Å –≤–∞–ª—é—Ç.*¬©',  # –ö—É—Ä—Å –≤–∞–ª—é—Ç –∑ –∫–æ–ø—ñ—Ä–∞–π—Ç–æ–º
        ]
        
        import re
        for pattern in unwanted_patterns:
            if re.search(pattern, sentence, re.IGNORECASE):
                return True
        
        return False
    
    def generate_hashtags(self, news_title, news_content):
        """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
        try:
            # –Ø–∫—â–æ —î OpenAI API –∫–ª—é—á, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            if OPENAI_API_KEY and OPENAI_API_KEY.strip():
                return self.generate_ai_hashtags(news_title, news_content)
            else:
                # –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                return self.generate_local_hashtags(news_title, news_content)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—Ç–µ–≥—ñ–≤: {e}")
            return "#–Ω–æ–≤–∏–Ω–∏ #—É–∫—Ä–∞—ó–Ω–∞ #–≤–∞–∂–ª–∏–≤–æ #–∞–∫—Ç—É–∞–ª—å–Ω–æ #—Ç—Ä–µ–Ω–¥–∏"
    
    def generate_ai_hashtags(self, news_title, news_content):
        """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ OpenAI"""
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        if not self.client:
            return self.generate_local_hashtags(news_title, news_content)
        
        prompt = f"""
        –°—Ç–≤–æ—Ä–∏ 5-10 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏:
        
        –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_title}
        –ö–æ–Ω—Ç–µ–Ω—Ç: {news_content[:300]}...
        
        –•–µ—à—Ç–µ–≥–∏ –º–∞—é—Ç—å –±—É—Ç–∏:
        - –ü–æ–ø—É–ª—è—Ä–Ω–∏–º–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ
        - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –¥–æ —Ç–µ–º–∏
        - –ë–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
        - –ü–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ #
        
        –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.
        """
        
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ SMM —Ç–∞ —Ö–µ—à—Ç–µ–≥—ñ–≤ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
    
    def generate_local_hashtags(self, news_title, news_content):
        """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –®–Ü"""
        text = f"{news_title} {news_content}".lower()
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ö–µ—à—Ç–µ–≥—ñ–≤
        hashtag_categories = {
            'base': ['#–Ω–æ–≤–∏–Ω–∏', '#—É–∫—Ä–∞—ó–Ω–∞', '#–∞–∫—Ç—É–∞–ª—å–Ω–æ', '#–≤–∞–∂–ª–∏–≤–æ'],
            'politics': ['#–ø–æ–ª—ñ—Ç–∏–∫–∞', '#—É—Ä—è–¥', '#–¥–µ—Ä–∂–∞–≤–∞—Å–ø—Ä–∞–≤–∞', '#–≤–∏–±–æ—Ä–∏'],
            'economy': ['#–µ–∫–æ–Ω–æ–º—ñ–∫–∞', '#–±—ñ–∑–Ω–µ—Å', '#–≥—Ä–æ—à—ñ', '#—Ä–∏–Ω–æ–∫', '#—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó'],
            'technology': ['#—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', '#—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó', '#IT', '#–º–∞–π–±—É—Ç–Ω—î'],
            'sports': ['#—Å–ø–æ—Ä—Ç', '#—á–µ–º–ø—ñ–æ–Ω–∞—Ç', '#–ø–µ—Ä–µ–º–æ–≥–∞', '#–∑–º–∞–≥–∞–Ω–Ω—è'],
            'entertainment': ['#—Ä–æ–∑–≤–∞–≥–∏', '#—à–æ—É–±—ñ–∑', '#–∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—ñ', '#–∫—É–ª—å—Ç—É—Ä–∞'],
            'health': ['#–∑–¥–æ—Ä–æ–≤—è', '#–º–µ–¥–∏—Ü–∏–Ω–∞', '#–ª—ñ–∫—É–≤–∞–Ω–Ω—è'],
            'world': ['#—Å–≤—ñ—Ç–æ–≤—ñ–Ω–æ–≤–∏–Ω–∏', '#–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ', '#–≥–µ–æ–ø–æ–ª—ñ—Ç–∏–∫–∞'],
            'trending': ['#—Ç—Ä–µ–Ω–¥–∏', '#—Ç–æ–ø–Ω–æ–≤–∏–Ω–∏', '#–æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è', '#–ø–æ–ø—É–ª—è—Ä–Ω–µ']
        }
        
        selected_hashtags = hashtag_categories['base'].copy()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏
        category = self.detect_news_category(news_title, news_content)
        if category in hashtag_categories:
            selected_hashtags.extend(hashtag_categories[category][:3])
        
        # –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–Ω–¥–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏
        selected_hashtags.extend(random.sample(hashtag_categories['trending'], 2))
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
        hashtags = list(set(selected_hashtags))
        random.shuffle(hashtags)
        
        return ' '.join(hashtags[:8])  # –ú–∞–∫—Å–∏–º—É–º 8 —Ö–µ—à—Ç–µ–≥—ñ–≤
    
    def create_full_post(self, news_title, news_content):
        """–°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–∏–π –ø–æ—Å—Ç –∑ –æ–ø–∏—Å–æ–º —Ç–∞ —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
        description = self.generate_post_description(news_title, news_content)
        hashtags = self.generate_hashtags(news_title, news_content)
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç
        full_post = f"{description}\n\n{hashtags}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç Instagram (2200 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(full_post) > 2200:
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ö–µ—à—Ç–µ–≥–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            max_desc_length = 2200 - len(hashtags) - 10
            if len(description) > max_desc_length:
                description = description[:max_desc_length] + "..."
            full_post = f"{description}\n\n{hashtags}"
        
        return full_post
    
    def add_story_elements(self, post_text):
        """–î–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è Stories (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"""
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏, –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—â–æ –¥–ª—è Stories
        story_elements = {
            'text': post_text[:500],  # Stories –º–∞—é—Ç—å –æ–±–º–µ–∂–µ–Ω–Ω—è
            'stickers': ['poll', 'question', 'countdown'],
            'background_color': random.choice(['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'])
        }
        return story_elements
