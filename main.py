import schedule
import time
import random
import logging
from datetime import datetime, timedelta
from news_collector import NewsCollector
from image_handler import ImageHandler
from content_generator import ContentGenerator
from instagram_publisher import InstagramPublisher
from config import POSTING_INTERVALS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('instagram_bot.log'),
        logging.StreamHandler()
    ]
)

class InstagramNewsBot:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.image_handler = ImageHandler()
        self.content_generator = ContentGenerator()
        self.instagram_publisher = InstagramPublisher()
        self.posted_articles = set()  # –©–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏
        
    def create_and_publish_post(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞"""
        try:
            logging.info("üöÄ –ü–æ—á–∏–Ω–∞—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")
            
            # 1. –ó–±–∏—Ä–∞—î–º–æ —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏
            logging.info("üì∞ –ó–±–∏—Ä–∞—é –Ω–æ–≤–∏–Ω–∏...")
            news_article = self.news_collector.get_random_news()
            
            if not news_article:
                logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∏")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ —Ü—é –Ω–æ–≤–∏–Ω—É —Ä–∞–Ω—ñ—à–µ
            article_id = hash(news_article.get('title', '') + news_article.get('link', ''))
            if article_id in self.posted_articles:
                logging.info("‚è≠Ô∏è –¶—è –Ω–æ–≤–∏–Ω–∞ –≤–∂–µ –±—É–ª–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞, —à—É–∫–∞—é —ñ–Ω—à—É...")
                return self.create_and_publish_post()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —à—É–∫–∞—î–º–æ —ñ–Ω—à—É
            
            logging.info(f"üìÑ –û–±—Ä–∞–Ω–æ –Ω–æ–≤–∏–Ω—É: {news_article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # 2. –®—É–∫–∞—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            logging.info("üñºÔ∏è –®—É–∫–∞—é –ø—ñ–¥—Ö–æ–¥—è—â–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
            image_data = self.image_handler.find_news_related_image(
                news_article.get('title', ''),
                news_article.get('text', news_article.get('summary', ''))
            )
            
            if not image_data:
                logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                return False
            
            logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_data['source']} - {image_data['quality_check']}")
            
            # 3. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            image_filename = f"post_{timestamp}.jpg"
            image_path = self.image_handler.download_image(image_data['url'], image_filename)
            
            if not image_path:
                logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                return False
            
            # 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
            logging.info("‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞...")
            post_content = self.content_generator.create_full_post(
                news_article.get('title', ''),
                news_article.get('text', news_article.get('summary', ''))
            )
            
            logging.info(f"üìù –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç ({len(post_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
            
            # 5. –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ Instagram
            logging.info("üì§ –ü—É–±–ª—ñ–∫—É—é –≤ Instagram...")
            success, message = self.instagram_publisher.safe_publish(
                image_path, 
                post_content,
                add_hashtags_as_comment=True
            )
            
            if success:
                logging.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! {message}")
                self.posted_articles.add(article_id)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç—É
                account_info = self.instagram_publisher.get_account_info()
                if account_info:
                    logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {account_info['followers']} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤, {account_info['posts']} –ø–æ—Å—Ç—ñ–≤")
                
                return True
            else:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {message}")
                return False
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def test_run(self):
        """–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        logging.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É...")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω
        logging.info("–¢–µ—Å—Ç—É—é –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
        news = self.news_collector.get_random_news()
        if news:
            logging.info(f"‚úÖ –ù–æ–≤–∏–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å: {news.get('title', 'N/A')}")
        else:
            logging.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–±–æ—Ä–æ–º –Ω–æ–≤–∏–Ω")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–Ω—Ç–µ–Ω—Ç—É
        logging.info("–¢–µ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        content = self.content_generator.create_full_post(
            "–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞", 
            "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É."
        )
        logging.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –¢–µ—Å—Ç—É—î–º–æ –≤—Ö—ñ–¥ –≤ Instagram
        logging.info("–¢–µ—Å—Ç—É—é –≤—Ö—ñ–¥ –≤ Instagram...")
        if self.instagram_publisher.login():
            logging.info("‚úÖ –í—Ö—ñ–¥ –≤ Instagram —É—Å–ø—ñ—à–Ω–∏–π")
            account_info = self.instagram_publisher.get_account_info()
            if account_info:
                logging.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç: @{account_info['username']}")
        else:
            logging.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤—Ö–æ–¥–æ–º –≤ Instagram")
            return False
        
        logging.info("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    
    def schedule_posts(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Ä–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π"""
        def random_post_job():
            """–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2-3 –≥–æ–¥–∏–Ω–∏"""
            self.create_and_publish_post()
            
            # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 2-3 –≥–æ–¥–∏–Ω–∏
            next_interval = random.choice(POSTING_INTERVALS)
            next_run = datetime.now() + timedelta(hours=next_interval)
            
            logging.info(f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞: {next_run.strftime('%H:%M')}")
            
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–µ
            schedule.clear()
            schedule.every().day.at(next_run.strftime('%H:%M')).do(random_post_job)
        
        # –ü–ª–∞–Ω—É—î–º–æ –ø–µ—Ä—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é
        first_interval = random.choice(POSTING_INTERVALS)
        first_run = datetime.now() + timedelta(hours=first_interval)
        
        logging.info(f"‚è∞ –ü–µ—Ä—à–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞: {first_run.strftime('%H:%M')}")
        schedule.every().day.at(first_run.strftime('%H:%M')).do(random_post_job)
    
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Instagram News Bot...")
        
        # –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –≤—Å–µ
        if not self.test_run():
            logging.error("‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ, –∑—É–ø–∏–Ω—è—é –±–æ—Ç–∞")
            return
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
        self.schedule_posts()
        
        logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ß–µ–∫–∞—é —Ä–æ–∑–∫–ª–∞–¥—É...")
        logging.info("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                
        except KeyboardInterrupt:
            logging.info("üëã –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            self.instagram_publisher.logout()
            logging.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import sys
    
    bot = InstagramNewsBot()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--test":
            # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º
            bot.test_run()
        elif sys.argv[1] == "--post":
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è
            bot.create_and_publish_post()
        elif sys.argv[1] == "--run":
            # –ü–æ—Å—Ç—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º
            bot.run_bot()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
            print("  --test  : –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫")
            print("  --post  : –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è")
            print("  --run   : –ü–æ—Å—Ç—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏")
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω–∏–π —Ä–µ–∂–∏–º
        bot.run_bot()

if __name__ == "__main__":
    main()
