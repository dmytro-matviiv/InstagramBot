#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è Instagram –±–æ—Ç–∞ –±–µ–∑ –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–∞–≥–ª—É—à–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –±–µ—Ä–µ—Ç—å—Å—è –∑ –Ω–æ–≤–∏–Ω–∏
"""

import os
import time
import random
import logging
from datetime import datetime
from news_collector import NewsCollector
from content_generator import ContentGenerator
from instagram_publisher import InstagramPublisher
from translator import NewsTranslator
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –µ–º–æ–¥–∑—ñ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('instagram_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class SimpleInstagramBot:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.content_generator = ContentGenerator()
        self.instagram_publisher = InstagramPublisher()
        self.translator = NewsTranslator()
        self.posted_articles = set()
    
    def create_text_image(self, title, category="news"):
        """–°—Ç–≤–æ—Ä—é—î –∫—Ä–∞—Å–∏–≤–∏–π —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –±–∞–Ω–µ—Ä"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ –¥–ª—è Instagram)
        width, height = 1350, 1080
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
        colors = {
            'war': ('#0057B7', '#FFD700'),      # –°–∏–Ω—ñ–π + –∂–æ–≤—Ç–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø—Ä–∞–ø–æ—Ä
            'news': ('#2563EB', '#FFFFFF'),     # –°–∏–Ω—ñ–π + –±—ñ–ª–∏–π
            'politics': ('#DC2626', '#FFFFFF'), # –ß–µ—Ä–≤–æ–Ω–∏–π + –±—ñ–ª–∏–π  
            'technology': ('#059669', '#FFFFFF'), # –ó–µ–ª–µ–Ω–∏–π + –±—ñ–ª–∏–π
            'world': ('#7C3AED', '#FFFFFF'),    # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π + –±—ñ–ª–∏–π
            'business': ('#EA580C', '#FFFFFF')  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π + –±—ñ–ª–∏–π
        }
        
        bg_color, text_color = colors.get(category, colors['news'])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç —Ñ–æ–Ω
        img = Image.new('RGB', (width, height), bg_color)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ hex –≤ RGB
        def hex_to_rgb(hex_color):
            hex_color = hex_color.lstrip('#')
            return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        
        bg_rgb = hex_to_rgb(bg_color)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
        for y in range(height):
            alpha = y / height
            # –†–æ–±–∏–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç –≤—ñ–¥ —Å–≤—ñ—Ç–ª—ñ—à–æ–≥–æ –¥–æ —Ç–µ–º–Ω—ñ—à–æ–≥–æ
            r = int(bg_rgb[0] * (1 - alpha * 0.3))
            g = int(bg_rgb[1] * (1 - alpha * 0.3))
            b = int(bg_rgb[2] * (1 - alpha * 0.3))
            
            for x in range(width):
                img.putpixel((x, y), (r, g, b))
        
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—Ä–∞—â–∏–π —à—Ä–∏—Ñ—Ç
        try:
            # –í–µ–ª–∏–∫–∏–π —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —à—Ä–∏—Ñ—Ç
            title_font = ImageFont.truetype("arial.ttf", 58)
        except IOError:
            title_font = ImageFont.load_default()
        
        # –°–∫–æ—Ä–æ—á—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
        if len(title) > 50:
            title = title[:47] + "..."
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏ (–º–∞–∫—Å–∏–º—É–º 3 —Ä—è–¥–∫–∏)
        words = title.split()
        lines = []
        current_line = []
        max_chars_per_line = 20
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            if len(test_line) <= max_chars_per_line:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                
        if current_line:
            lines.append(' '.join(current_line))
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 —Ä—è–¥–∫—ñ–≤
        lines = lines[:3]
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç
        line_height = 80
        total_text_height = len(lines) * line_height
        start_y = (height - total_text_height) // 2 - 50
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É –≤ RGB
        text_rgb = hex_to_rgb(text_color) if text_color != '#FFFFFF' else (255, 255, 255)
        
        # –ú–∞–ª—é—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
        for i, line in enumerate(lines):
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            bbox = draw.textbbox((0, 0), line, font=title_font)
            text_width = bbox[2] - bbox[0]
            x = (width - text_width) // 2
            y = start_y + i * line_height
            
            # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞ —Ç—ñ–Ω—å –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
            shadow_color = (0, 0, 0) if text_color == '#FFFFFF' else (255, 255, 255)
            draw.text((x+3, y+3), line, font=title_font, fill=shadow_color)
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), line, font=title_font, fill=text_rgb)
        
        # –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å–∏–º–≤–æ–ª—ñ–∫—É
        if category == 'war':
            logo_text = "üá∫üá¶ –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò üá∫üá¶"
        else:
            logo_text = "üá∫üá¶ –£–ö–†–ê–á–ù–ò –ù–û–í–ò–ù–ò"
        
        logo_bbox = draw.textbbox((0, 0), logo_text, font=title_font)
        logo_width = logo_bbox[2] - logo_bbox[0]
        
        # –¢—ñ–Ω—å –¥–ª—è –ª–æ–≥–æ
        draw.text(((width - logo_width) // 2 + 2, height - 120 + 2), logo_text, 
                 font=title_font, fill=(0, 0, 0))
        # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥–æ
        draw.text(((width - logo_width) // 2, height - 120), logo_text, 
                 font=title_font, fill=(255, 255, 255))
        
        # –î–æ–¥–∞—î–º–æ —Ä–∞–º–∫—É
        border_width = 5
        draw.rectangle([0, 0, width-1, height-1], outline='white', width=border_width)
        
        return img
    
    def create_vertical_text_image(self, title, category="news"):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è Instagram Stories"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è Instagram Stories (9:16)
        width, height = 1080, 1920
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
        colors = {
            'war': ('#0057B7', '#FFD700'),      # –°–∏–Ω—ñ–π + –∂–æ–≤—Ç–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø—Ä–∞–ø–æ—Ä
            'news': ('#2563EB', '#FFFFFF'),     # –°–∏–Ω—ñ–π + –±—ñ–ª–∏–π
            'politics': ('#DC2626', '#FFFFFF'), # –ß–µ—Ä–≤–æ–Ω–∏–π + –±—ñ–ª–∏–π  
            'technology': ('#059669', '#FFFFFF'), # –ó–µ–ª–µ–Ω–∏–π + –±—ñ–ª–∏–π
            'world': ('#7C3AED', '#FFFFFF'),    # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π + –±—ñ–ª–∏–π
            'business': ('#EA580C', '#FFFFFF')  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π + –±—ñ–ª–∏–π
        }
        
        bg_color, text_color = colors.get(category, colors['news'])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Ñ–æ–Ω
        img = Image.new('RGB', (width, height), bg_color)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ hex –≤ RGB
        def hex_to_rgb(hex_color):
            hex_color = hex_color.lstrip('#')
            return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        
        bg_rgb = hex_to_rgb(bg_color)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
        for y in range(height):
            alpha = y / height
            r = int(bg_rgb[0] * (1 - alpha * 0.2))
            g = int(bg_rgb[1] * (1 - alpha * 0.2))
            b = int(bg_rgb[2] * (1 - alpha * 0.2))
            
            for x in range(width):
                img.putpixel((x, y), (r, g, b))
        
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —à—Ä–∏—Ñ—Ç
        try:
            title_font = ImageFont.truetype("arial.ttf", 72)
            subtitle_font = ImageFont.truetype("arial.ttf", 48)
        except IOError:
            title_font = ImageFont.load_default()
            subtitle_font = ImageFont.load_default()
        
        # –°–∫–æ—Ä–æ—á—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(title) > 60:
            title = title[:57] + "..."
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        words = title.split()
        lines = []
        current_line = []
        max_chars_per_line = 18  # –ú–µ–Ω—à–µ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            if len(test_line) <= max_chars_per_line:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                
        if current_line:
            lines.append(' '.join(current_line))
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ 4 —Ä—è–¥–∫—ñ–≤ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
        lines = lines[:4]
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç —É –≤–µ—Ä—Ö–Ω—ñ–π –ø–æ–ª–æ–≤–∏–Ω—ñ
        line_height = 90
        total_text_height = len(lines) * line_height
        start_y = (height // 3) - (total_text_height // 2)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
        text_rgb = hex_to_rgb(text_color) if text_color != '#FFFFFF' else (255, 255, 255)
        
        # –ú–∞–ª—é—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
        for i, line in enumerate(lines):
            bbox = draw.textbbox((0, 0), line, font=title_font)
            text_width = bbox[2] - bbox[0]
            x = (width - text_width) // 2
            y = start_y + i * line_height
            
            # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞ —Ç—ñ–Ω—å
            shadow_color = (0, 0, 0) if text_color == '#FFFFFF' else (255, 255, 255)
            draw.text((x+3, y+3), line, font=title_font, fill=shadow_color)
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), line, font=title_font, fill=text_rgb)
        
        # –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å–∏–º–≤–æ–ª—ñ–∫—É –≤–Ω–∏–∑—É
        if category == 'war':
            logo_text = "üá∫üá¶ –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò üá∫üá¶"
        else:
            logo_text = "üá∫üá¶ –£–ö–†–ê–á–ù–ê –°–¨–û–ì–û–î–ù–Ü üá∫üá¶"
        
        logo_bbox = draw.textbbox((0, 0), logo_text, font=subtitle_font)
        logo_width = logo_bbox[2] - logo_bbox[0]
        
        # –õ–æ–≥–æ—Ç–∏–ø –≤–Ω–∏–∑—É
        logo_y = height - 200
        draw.text(((width - logo_width) // 2 + 2, logo_y + 2), logo_text, 
                 font=subtitle_font, fill=(0, 0, 0))
        draw.text(((width - logo_width) // 2, logo_y), logo_text, 
                 font=subtitle_font, fill=(255, 255, 255))
        
        # –î–æ–¥–∞—î–º–æ —Ä–∞–º–∫—É
        border_width = 8
        draw.rectangle([0, 0, width-1, height-1], outline='white', width=border_width)
        
        return img
    
    def get_image_from_news(self, news_article):
        """–û—Ç—Ä–∏–º—É—î —Ä–µ–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç"""
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ —Ä–µ–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–Ω–∏
        image_urls = []
        if news_article.get('top_image'):
            image_urls.append(news_article['top_image'])
        if news_article.get('images'):
            image_urls.extend(news_article['images'][:3])  # –ü–µ—Ä—à—ñ 3 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            
        for image_url in image_urls:
            try:
                logging.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ä–µ–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_url}")
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                response = requests.get(image_url, timeout=15, headers=headers)
                if response.status_code == 200:
                    img = Image.open(BytesIO(response.content))
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    width, height = img.size
                    if width < 300 or height < 300:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–∞–ª–µ–Ω—å–∫—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    
                    logging.info(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {width}x{height}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Instagram Stories (9:16)
                    target_width = 1080
                    target_height = 1920
                    
                    # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ, —Ä–æ–±–∏–º–æ –π–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–º
                    if width > height:
                        # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç—É (–±–µ—Ä–µ–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É —á–∞—Å—Ç–∏–Ω—É)
                        crop_size = min(width, height)
                        left = (width - crop_size) // 2
                        top = (height - crop_size) // 2
                        img = img.crop((left, top, left + crop_size, top + crop_size))
                        logging.info(f"–û–±—Ä—ñ–∑–∞–Ω–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç—É: {crop_size}x{crop_size}")
                    
                    # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –¥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                    img = img.resize((target_width, target_height), Image.Resampling.LANCZOS)
                    logging.info(f"–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {target_width}x{target_height}")
                    return img
                    
            except Exception as e:
                logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {image_url}: {e}")
                continue
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
        logging.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–¥–∞—Ç–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –Ω–æ–≤–∏–Ω—ñ")
        return None
    
    def detect_news_category(self, title, content):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        text = f"{title} {content}".lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
        war_keywords = [
            '–≤—ñ–π–Ω–∞', 'war', '—Ñ—Ä–æ–Ω—Ç', 'front', '–±–æ–π–æ–≤—ñ', 'combat', '–Ω–∞—Å—Ç—É–ø', 'offensive',
            '–æ–±–æ—Ä–æ–Ω–∞', 'defense', '–æ–±—Å—Ç—Ä—ñ–ª', 'shelling', '—Ä–∞–∫–µ—Ç', 'missile', '–¥—Ä–æ–Ω', 'drone',
            '–≤—ñ–π—Å—å–∫–æ–≤', 'military', '–∞—Ä–º—ñ—è', 'army', '–≤—Ç—Ä–∞—Ç–∏', 'casualties', '–∑–∞–≥–∏–±–ª—ñ',
            '–ø–æ—Ä–∞–Ω–µ–Ω—ñ', 'wounded', '—Ç–∞–Ω–∫', 'tank', '–∞—Ä—Ç–∏–ª–µ—Ä—ñ—è', 'artillery',
            '–∞–≤—ñ–∞—É–¥–∞—Ä', 'airstrike', '–æ–∫—É–ø–∞—Ü', 'occupation', '–∑–≤—ñ–ª—å–Ω–µ–Ω', 'liberation'
        ]
        
        # –ü–æ–ª—ñ—Ç–∏—á–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        politics_keywords = [
            '–ø–æ–ª—ñ—Ç–∏–∫–∞', 'politics', '—É—Ä—è–¥', 'government', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', 'president',
            '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', 'parliament', '–º—ñ–Ω—ñ—Å—Ç—Ä', 'minister', '–∑–∞–∫–æ–Ω', 'law',
            '—Ä—ñ—à–µ–Ω–Ω—è', 'decision', '—Å–∞–Ω–∫—Ü—ñ—ó', 'sanctions'
        ]
        
        # –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        world_keywords = [
            '–Ω–∞—Ç–æ', 'nato', '—î–≤—Ä–æ—Å–æ—é–∑', 'eu', '—Å—à–∞', 'usa', '—Ä–æ—Å—ñ—è', 'russia',
            '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω', 'international', '–¥–∏–ø–ª–æ–º–∞—Ç', 'diplomatic'
        ]
        
        if any(keyword in text for keyword in war_keywords):
            return 'war'
        elif any(keyword in text for keyword in politics_keywords):
            return 'politics'
        elif any(keyword in text for keyword in world_keywords):
            return 'world'
        else:
            return 'news'
    
    def create_and_publish_post(self):
        """–°–ø—Ä–æ—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞"""
        try:
            logging.info("–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")
            
            # 1. –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
            logging.info("–ó–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
            all_news = self.news_collector.collect_fresh_news()
            
            # –Ø–∫—â–æ RSS –Ω–µ –ø—Ä–∞—Ü—é—î - –ø—Ä–∏–ø–∏–Ω—è—î–º–æ —Ä–æ–±–æ—Ç—É (–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —Ñ–æ—Ç–æ)
            if not all_news:
                logging.error("RSS –¥–∂–µ—Ä–µ–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —ñ fallback –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ —Ñ–æ—Ç–æ.")
                return False
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –£–∫—Ä–∞—ó–Ω–æ—é
            ukraine_news = self.translator.filter_ukraine_related(all_news)
            
            if not ukraine_news:
                logging.info("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏")
                ukraine_news = all_news
            
            # –í—ñ–¥–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤—ñ–π—Å—å–∫–æ–≤–∏–º –Ω–æ–≤–∏–Ω–∞–º
            prioritized_news = self.translator.prioritize_war_news(ukraine_news)
            
            # –û–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω—É –∑ —Ñ–æ—Ç–æ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –¥–æ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
            selected_article = None
            for article in prioritized_news[:30]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω–∏
                title = article.get('title', '')
                description = article.get('description', '')
                
                if (title and title != '–ù–æ–≤–∏–Ω–∞ –∑ RSS' and len(title) > 20 and 
                    description and len(description) > 50 and
                    '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É' not in description):
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ —Ä–∞–Ω—ñ—à–µ
                    article_id = hash(title + article.get('link', ''))
                    if article_id not in self.posted_articles:
                        
                        # –ì–û–õ–û–í–ù–ï: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ñ–æ—Ç–æ –≤ –Ω–æ–≤–∏–Ω—ñ
                        logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –Ω–æ–≤–∏–Ω—ñ: {title[:50]}...")
                        test_image = self.get_image_from_news(article)
                        
                        if test_image is not None:
                            logging.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω—É –∑ —Ñ–æ—Ç–æ!")
                            selected_article = article
                            break
                        else:
                            logging.info("‚ùå –ù–æ–≤–∏–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—Å—Ç—É–ø–Ω—É...")
            
            if not selected_article:
                logging.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –∑ —Ñ–æ—Ç–æ! –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ RSS –¥–∂–µ—Ä–µ–ª–∞")
                return False
            
            news_article = selected_article
            
            logging.info(f"–û–±—Ä–∞–Ω–æ –Ω–æ–≤–∏–Ω—É: {news_article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö
            article_id = hash(news_article.get('title', '') + news_article.get('link', ''))
            self.posted_articles.add(article_id)
            
            # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–æ–≤–∏–Ω—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É
            logging.info("–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–æ–≤–∏–Ω–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É...")
            ukrainian_article = self.translator.translate_news_article(news_article)
            logging.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ukrainian_article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # 2. –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            logging.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
            image = self.get_image_from_news(ukrainian_article)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            image_filename = f"post_{timestamp}.jpg"
            image_path = f"temp_images/{image_filename}"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            os.makedirs("temp_images", exist_ok=True)
            
            image.save(image_path, "JPEG", quality=95)
            logging.info(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {image_path}")
            
            # 3. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å—Ç–∞—Ç—Ç—ñ
            logging.info("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            post_content = self.content_generator.create_full_post(
                ukrainian_article.get('title', ''),
                ukrainian_article.get('text', ukrainian_article.get('summary', ''))
            )
            
            logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç ({len(post_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
            
            # 4. –ü—É–±–ª—ñ–∫—É—î–º–æ
            logging.info("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Instagram...")
            success, message = self.instagram_publisher.safe_publish(
                image_path, 
                post_content,
                add_hashtags_as_comment=True
            )
            
            if success:
                logging.info(f"–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! {message}")
                self.posted_articles.add(article_id)
                return True
            else:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {message}")
                return False
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def test_run(self):
        """–¢–µ—Å—Ç –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        logging.info("–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º...")
        
        # –¢–µ—Å—Ç –Ω–æ–≤–∏–Ω –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º
        logging.info("–¢–µ—Å—Ç –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω...")
        news = self.news_collector.get_random_news()
        if news:
            logging.info(f"–ù–æ–≤–∏–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å: {news.get('title', 'N/A')[:50]}...")
        else:
            logging.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ RSS, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
            logging.info("–ù–æ–≤–∏–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å: –¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞ (fallback —Ä–µ–∂–∏–º)...")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        logging.info("–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        image = self.create_text_image("–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏")
        test_path = "temp_images/test.jpg"
        os.makedirs("temp_images", exist_ok=True)
        image.save(test_path, "JPEG")
        logging.info("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
        logging.info("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        content = self.content_generator.create_full_post(
            "–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞", "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        )
        logging.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –¢–µ—Å—Ç Instagram
        logging.info("–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Instagram...")
        if self.instagram_publisher.login():
            logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Instagram —É—Å–ø—ñ—à–Ω–µ")
        else:
            logging.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑ Instagram")
            print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è Instagram Challenge:")
            print("1. –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ Instagram")
            print("2. –ü—Ä–æ–π–¥—ñ—Ç—å –≤—Å—ñ –∑–∞–ø–∏—Ç—É–≤–∞–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (email/SMS/—Å–µ–ª—Ñ—ñ)")
            print("3. –ó—Ä–æ–±—ñ—Ç—å –∫—ñ–ª—å–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –¥—ñ–π: –ª–∞–π–∫–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∏, –ø—ñ–¥–ø–∏—Å–∫–∏")
            print("4. –ü–æ—á–µ–∫–∞–π—Ç–µ 24-48 –≥–æ–¥–∏–Ω –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
            print("5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π IP –∞–¥—Ä–µ—Å (–Ω–µ VPN)")
            print("6. –ê–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é –Ω–∞–∑–≤–æ—é\n")
            return False
        
        logging.info("–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return True
    


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import sys
    
    bot = SimpleInstagramBot()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--test":
            bot.test_run()
        elif sys.argv[1] == "--post":
            bot.create_and_publish_post()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
            print("  --test  : –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫")
            print("  --post  : –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è")
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–µ—Å—Ç
        bot.test_run()

if __name__ == "__main__":
    main()
