#!/usr/bin/env python3
"""
–°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è Instagram –±–æ—Ç–∞ –±–µ–∑ –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–∞–≥–ª—É—à–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –±–µ—Ä–µ—Ç—å—Å—è –∑ –Ω–æ–≤–∏–Ω–∏
"""

import os
import time
import random
import logging
from datetime import datetime
from news_collector import NewsCollector
from content_generator import ContentGenerator
from instagram_publisher import InstagramPublisher
from translator import NewsTranslator
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –µ–º–æ–¥–∑—ñ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('instagram_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class SimpleInstagramBot:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.content_generator = ContentGenerator()
        self.instagram_publisher = InstagramPublisher()
        self.translator = NewsTranslator()
        self.posted_articles = set()
    
    def create_text_image(self, title, category="news"):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–∞–Ω–µ—Ä —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ –¥–ª—è Instagram)
        width, height = 1350, 1080
        
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω–∏–π –¥–∏–∑–∞–π–Ω)
        colors = {
            'war': '#0057B7',      # –°–∏–Ω—ñ–π –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø—Ä–∞–ø–æ—Ä–∞
            'news': '#FFD700',     # –ñ–æ–≤—Ç–∏–π –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ø—Ä–∞–ø–æ—Ä–∞  
            'politics': '#800080', # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
            'technology': '#32CD32', # –ó–µ–ª–µ–Ω–∏–π
            'world': '#FF4500',    # –ß–µ—Ä–≤–æ–Ω–æ-–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            'business': '#4682B4'  # –°—Ç–∞–ª–µ–≤–æ-—Å–∏–Ω—ñ–π
        }
        
        bg_color = colors.get(category, colors['news'])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
        img = Image.new('RGB', (width, height), bg_color)
        
        # –î–æ–¥–∞—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç (—Ç–µ–º–Ω—ñ—à–µ –∑–Ω–∏–∑—É)
        for y in range(height):
            alpha = y / height
            r = int(int(bg_color[1:3], 16) * (1 - alpha * 0.3))
            g = int(int(bg_color[3:5], 16) * (1 - alpha * 0.3))
            b = int(int(bg_color[5:7], 16) * (1 - alpha * 0.3))
            color = f"#{r:02x}{g:02x}{b:02x}"
            
            for x in range(width):
                img.putpixel((x, y), (r, g, b))
        
        draw = ImageDraw.Draw(img)
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç
        try:
            # –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
            font_size = max(60, min(100, int(800 / len(title) * 10)))
            font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏
        words = title.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            # –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —à–∏—Ä–∏–Ω–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
            if len(test_line) < 15:  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª—ñ–≤ –≤ —Ä—è–¥–∫—É
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç
        total_height = len(lines) * 80
        start_y = (height - total_height) // 2
        
        for i, line in enumerate(lines[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä—è–¥–∫—ñ–≤
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x = (width - text_width) // 2
            y = start_y + i * 80
            
            # –¢—ñ–Ω—å —Ç–µ–∫—Å—Ç—É
            draw.text((x+2, y+2), line, font=font, fill='black')
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), line, font=font, fill='white')
        
        # –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å–∏–º–≤–æ–ª—ñ–∫—É
        if category == 'war':
            logo_text = "üá∫üá¶ –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò üá∫üá¶"
        else:
            logo_text = "üá∫üá¶ –£–ö–†–ê–á–ù–ò –ù–û–í–ò–ù–ò"
        
        logo_bbox = draw.textbbox((0, 0), logo_text, font=font)
        logo_width = logo_bbox[2] - logo_bbox[0]
        
        # –¢—ñ–Ω—å –¥–ª—è –ª–æ–≥–æ
        draw.text(((width - logo_width) // 2 + 2, height - 150 + 2), logo_text, 
                 font=font, fill='black')
        # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥–æ
        draw.text(((width - logo_width) // 2, height - 150), logo_text, 
                 font=font, fill='white')
        
        # –î–æ–¥–∞—î–º–æ —Ä–∞–º–∫—É
        border_width = 5
        draw.rectangle([0, 0, width-1, height-1], outline='white', width=border_width)
        
        return img
    
    def get_image_from_news(self, news_article):
        """–ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–Ω–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –≤–ª–∞—Å–Ω–µ"""
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–Ω–∏
        if news_article.get('top_image'):
            try:
                response = requests.get(news_article['top_image'], timeout=10)
                if response.status_code == 200:
                    img = Image.open(BytesIO(response.content))
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ
                    width, height = img.size
                    
                    # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ, –æ–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ
                    if height > width:
                        # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                        target_width = height * 1.25  # —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è 5:4
                        if width < target_width:
                            # –†–æ–∑—Ç—è–≥—É—î–º–æ –ø–æ —à–∏—Ä–∏–Ω—ñ
                            img = img.resize((int(target_width), height), Image.Resampling.LANCZOS)
                            width = int(target_width)
                        
                        # –¢–µ–ø–µ—Ä –æ–±—Ä—ñ–∑–∞—î–º–æ –∑–≤–µ—Ä—Ö—É —Ç–∞ –∑–Ω–∏–∑—É
                        target_height = width / 1.25
                        top = (height - target_height) // 2
                        img = img.crop((0, int(top), width, int(top + target_height)))
                    
                    # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É Instagram  
                    img = img.resize((1350, 1080), Image.Resampling.LANCZOS)
                    return img
            except Exception as e:
                logging.info(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–Ω–∏: {e}")
        
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        title = news_article.get('title', '–í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏')
        category = self.detect_news_category(title, news_article.get('text', ''))
        return self.create_text_image(title, category)
    
    def detect_news_category(self, title, content):
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        text = f"{title} {content}".lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
        war_keywords = [
            '–≤—ñ–π–Ω–∞', 'war', '—Ñ—Ä–æ–Ω—Ç', 'front', '–±–æ–π–æ–≤—ñ', 'combat', '–Ω–∞—Å—Ç—É–ø', 'offensive',
            '–æ–±–æ—Ä–æ–Ω–∞', 'defense', '–æ–±—Å—Ç—Ä—ñ–ª', 'shelling', '—Ä–∞–∫–µ—Ç', 'missile', '–¥—Ä–æ–Ω', 'drone',
            '–≤—ñ–π—Å—å–∫–æ–≤', 'military', '–∞—Ä–º—ñ—è', 'army', '–≤—Ç—Ä–∞—Ç–∏', 'casualties', '–∑–∞–≥–∏–±–ª—ñ',
            '–ø–æ—Ä–∞–Ω–µ–Ω—ñ', 'wounded', '—Ç–∞–Ω–∫', 'tank', '–∞—Ä—Ç–∏–ª–µ—Ä—ñ—è', 'artillery',
            '–∞–≤—ñ–∞—É–¥–∞—Ä', 'airstrike', '–æ–∫—É–ø–∞—Ü', 'occupation', '–∑–≤—ñ–ª—å–Ω–µ–Ω', 'liberation'
        ]
        
        # –ü–æ–ª—ñ—Ç–∏—á–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        politics_keywords = [
            '–ø–æ–ª—ñ—Ç–∏–∫–∞', 'politics', '—É—Ä—è–¥', 'government', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', 'president',
            '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', 'parliament', '–º—ñ–Ω—ñ—Å—Ç—Ä', 'minister', '–∑–∞–∫–æ–Ω', 'law',
            '—Ä—ñ—à–µ–Ω–Ω—è', 'decision', '—Å–∞–Ω–∫—Ü—ñ—ó', 'sanctions'
        ]
        
        # –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        world_keywords = [
            '–Ω–∞—Ç–æ', 'nato', '—î–≤—Ä–æ—Å–æ—é–∑', 'eu', '—Å—à–∞', 'usa', '—Ä–æ—Å—ñ—è', 'russia',
            '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω', 'international', '–¥–∏–ø–ª–æ–º–∞—Ç', 'diplomatic'
        ]
        
        if any(keyword in text for keyword in war_keywords):
            return 'war'
        elif any(keyword in text for keyword in politics_keywords):
            return 'politics'
        elif any(keyword in text for keyword in world_keywords):
            return 'world'
        else:
            return 'news'
    
    def create_and_publish_post(self):
        """–°–ø—Ä–æ—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞"""
        try:
            logging.info("–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")
            
            # 1. –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–Ω–∏
            logging.info("–ó–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
            all_news = self.news_collector.collect_fresh_news()
            
            if not all_news:
                logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∏")
                return False
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –£–∫—Ä–∞—ó–Ω–æ—é
            ukraine_news = self.translator.filter_ukraine_related(all_news)
            
            if not ukraine_news:
                logging.info("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏")
                ukraine_news = all_news
            
            # –í—ñ–¥–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤—ñ–π—Å—å–∫–æ–≤–∏–º –Ω–æ–≤–∏–Ω–∞–º
            prioritized_news = self.translator.prioritize_war_news(ukraine_news)
            
            # –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –Ω–æ–≤–∏–Ω—É –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            news_article = random.choice(prioritized_news[:10])  # –¢–æ–ø-10 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ —Ü—é –Ω–æ–≤–∏–Ω—É —Ä–∞–Ω—ñ—à–µ
            article_id = hash(news_article.get('title', '') + news_article.get('link', ''))
            if article_id in self.posted_articles:
                logging.info("–¶—è –Ω–æ–≤–∏–Ω–∞ –≤–∂–µ –±—É–ª–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞, —à—É–∫–∞—é —ñ–Ω—à—É...")
                return self.create_and_publish_post()
            
            logging.info(f"–û–±—Ä–∞–Ω–æ –Ω–æ–≤–∏–Ω—É: {news_article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–æ–≤–∏–Ω—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É
            logging.info("–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–æ–≤–∏–Ω–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É...")
            ukrainian_article = self.translator.translate_news_article(news_article)
            logging.info(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ukrainian_article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            # 2. –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            logging.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
            image = self.get_image_from_news(ukrainian_article)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            image_filename = f"post_{timestamp}.jpg"
            image_path = f"temp_images/{image_filename}"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            os.makedirs("temp_images", exist_ok=True)
            
            image.save(image_path, "JPEG", quality=95)
            logging.info(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {image_path}")
            
            # 3. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å—Ç–∞—Ç—Ç—ñ
            logging.info("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            post_content = self.content_generator.create_full_post(
                ukrainian_article.get('title', ''),
                ukrainian_article.get('text', ukrainian_article.get('summary', ''))
            )
            
            logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç ({len(post_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
            
            # 4. –ü—É–±–ª—ñ–∫—É—î–º–æ
            logging.info("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Instagram...")
            success, message = self.instagram_publisher.safe_publish(
                image_path, 
                post_content,
                add_hashtags_as_comment=True
            )
            
            if success:
                logging.info(f"–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! {message}")
                self.posted_articles.add(article_id)
                return True
            else:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {message}")
                return False
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def test_run(self):
        """–¢–µ—Å—Ç –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        logging.info("–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º...")
        
        # –¢–µ—Å—Ç –Ω–æ–≤–∏–Ω
        logging.info("–¢–µ—Å—Ç –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω...")
        news = self.news_collector.get_random_news()
        if news:
            logging.info(f"–ù–æ–≤–∏–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å: {news.get('title', 'N/A')[:50]}...")
        else:
            logging.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–±–æ—Ä–æ–º –Ω–æ–≤–∏–Ω")
            return False
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        logging.info("–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        image = self.create_text_image("–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏")
        test_path = "temp_images/test.jpg"
        os.makedirs("temp_images", exist_ok=True)
        image.save(test_path, "JPEG")
        logging.info("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
        logging.info("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        content = self.content_generator.create_full_post(
            "–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞", "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        )
        logging.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –¢–µ—Å—Ç Instagram
        logging.info("–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Instagram...")
        if self.instagram_publisher.login():
            logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Instagram —É—Å–ø—ñ—à–Ω–µ")
        else:
            logging.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑ Instagram")
            return False
        
        logging.info("–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import sys
    
    bot = SimpleInstagramBot()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "--test":
            bot.test_run()
        elif sys.argv[1] == "--post":
            bot.create_and_publish_post()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:")
            print("  --test  : –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫")
            print("  --post  : –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è")
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–µ—Å—Ç
        bot.test_run()

if __name__ == "__main__":
    main()
